package mondrian.fmdql.servlet;

import java.util.List;

import mondrian.olap.Member;
import mondrian.olap.Position;
import mondrian.olap.Result;
import mondrian.olap.Util;

public class RenderFMDQL implements IRenderFMDQL {
	
	private Result resultado;
	
	private List<Position> columns;
	
	private List<Position> rows;  
	
	
	
	
	public StringBuffer renderizarCabecalho(StringBuffer html) {	
				
		List<Position> slicers = resultado.getSlicerAxis().getPositions();
        html.append("<table class='resulttable' cellspacing=1 border=0>");
        html.append(Util.nl);

        List<Position> columns = resultado.getAxes()[0].getPositions();
        List<Position> rows = null;
        if( resultado.getAxes().length == 2 )
            rows = resultado.getAxes()[1].getPositions();

        
        this.columns = columns;
        this.rows = rows;
        
        int columnWidth = columns.get(0).size();
        int rowWidth = 0;
        if( resultado.getAxes().length == 2 )
                rowWidth = resultado.getAxes()[1].getPositions().get(0).size();

        for (int j=0; j<columnWidth; j++) {
            html.append("<tr>");

            // if it has more than 1 dimension
            if (j == 0 && resultado.getAxes().length > 1) {
                // Print the top-left cell, and fill it with slicer members.
                html.append("<td nowrap class='slicer' rowspan='").append(
                    columnWidth).append("' colspan='").append(rowWidth)
                    .append("'>");
                /*for (Position position : slicers) {
                    int k = 0;
                    for (Member member : position) {
                        if (k > 0) {
                            html.append("<br/>");
                        }
                        html.append(member.getUniqueName());
                        k++;
                    }

                }*/
                html.append("&nbsp;");
                html.append("&nbsp;</td>").append(Util.nl);
            }

            // Print the column headings.
            for (int i=0; i<this.getColumns().size(); i++) {
                Position position = this.getColumns().get(i);            
                Member member = position.get(j);
                                                 
                int width = this.quantidadeDeColunasExtras();
                while ((i + 1) < this.getColumns().size() &&
                		this.getColumns().get(i + 1).get(j) == member) {
                    i++;
                    width++;
                }
                html.append("<td nowrap class='columnheading' align='center' colspan='")
                    .append(width).append("'>")
                    .append(member.getUniqueName()).append("</td>");
            }
            html.append("</tr>").append(Util.nl);            
        }
				
		return html;
	}

	@Override
	public StringBuffer renderResultado(StringBuffer html) {
		return this.renderResultado(html);
	}

	@Override
	public void renderCabecalhoDimensaoColuna(StringBuffer html, int coluna) {
		this.renderCabecalhoDimensaoColuna(html, coluna);		
	}
	
	

	public Result getResultado() {
		return resultado;
	}

	public void setResultado(Result resultado) {
		this.resultado = resultado;
	}

	public List<Position> getColumns() {
		return columns;
	}

	public void setColumns(List<Position> columns) {
		this.columns = columns;
	}

	public List<Position> getRows() {
		return rows;
	}

	public void setRows(List<Position> rows) {
		this.rows = rows;
	}

	@Override
	public int quantidadeDeColunasExtras() {
		return this.quantidadeDeColunasExtras();
	}
	
	
	
	public String formatValor(String valor) {
		String porcentagemFormatada = valor.replace(',', '*');
    	porcentagemFormatada = porcentagemFormatada.replace('.', ',');
    	porcentagemFormatada = porcentagemFormatada.replace('*', '.');
    	
    	return porcentagemFormatada;
	}
	
	
	
}
