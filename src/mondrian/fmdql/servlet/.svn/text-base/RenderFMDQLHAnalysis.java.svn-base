package mondrian.fmdql.servlet;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import mondrian.olap.Cell;
import mondrian.olap.Member;
import mondrian.olap.Position;
import mondrian.udf.HAnalysis;

public class RenderFMDQLHAnalysis extends RenderFMDQL implements IRenderFMDQL {
	
	@Override
	public int quantidadeDeColunasExtras() {
		return 2;
	}
	
	
	public StringBuffer renderResultado(StringBuffer html) {
		//if is two axes, show
              
        List<Double> valores = new ArrayList<Double>();
        
        if (this.getResultado().getAxes().length > 1) {        	
        
            for (int i=0; i<this.getRows().size(); i++) {   
            	
            	            	
            	
                for (int j=0; j<this.getColumns().size(); j++) {
                	                    	
                	Cell cell = this.getResultado().getCell(new int[]{j,i});
                	String formattedValue = cell.getFormattedValue();
                	formattedValue = formattedValue.replace(",", "");
                	
                	double valor = 0.0;
                	if(!formattedValue.trim().equals("")) {
                		valor = Double.parseDouble(formattedValue);
                	}                      	
                	
                	
					valores.add(valor);	
                }                
               
            }
                  
            	String linhaCabecalhoProcentagem = "<tr>";
            	linhaCabecalhoProcentagem = linhaCabecalhoProcentagem + "<td nowrap class='rowheading'>&nbsp;</td>";
            	
                for (int j=0; j<this.getColumns().size(); j++) {
                	linhaCabecalhoProcentagem = linhaCabecalhoProcentagem + "<td nowrap class='rowheading' align='center'>Absolute Value</td><td nowrap class='rowheading' align='center'>HA (%)</td>";
                }
                linhaCabecalhoProcentagem = linhaCabecalhoProcentagem + "</tr>"; 
                html.append(linhaCabecalhoProcentagem);
          
            List<Double> calcularPorcentagens = this.calcularPorcentagens(valores);
                            
            int contadorPorcentagens = 0;
            for (int i=0; i<this.getRows().size(); i++) {
                html.append("<tr>");
                final Position row = this.getRows().get(i);
                for (Member member : row) {
                    /*html.append("<td nowrap class='rowheading'>").append(
                        member.getUniqueName()).append("</td>");*/
                	html.append("<td nowrap class='rowheading'>").append(
                			member.getUniqueName().substring(member.getUniqueName().indexOf(".") + 1)).append("</td>");
                }
                for (int j=0; j<this.getColumns().size(); j++) {
                	                    	
                	Cell cell = this.getResultado().getCell(new int[]{j,i});                
                		showCellHAnalysis(html, cell, calcularPorcentagens.get(contadorPorcentagens));
                    	contadorPorcentagens++;
                
                }
                
                html.append("</tr>");
            }
            
       
        } else {
            html.append("<tr>");
            for (int i=0; i<this.getColumns().size(); i++) {
            	//showCellAnaliseVertical(html,result.getCell(new int[]{i}), 1.0);
            }
            html.append("</tr>");
        }
        html.append("</table>");
		
		return html;
	}


	
	private void showCellHAnalysis( StringBuffer out, Cell cell, double porcentagem) {
    	
    	DecimalFormat decimal = new DecimalFormat("#########0.00");
    	String procentagemFormatada = decimal.format(porcentagem);
    	procentagemFormatada = this.formatValor(procentagemFormatada);
    	if(cell.getFormattedValue().trim().equals("")) {
    		
    		 out.append("<td class='cell'></td>");
    		 out.append("<td class='cell'></td>");
    	}else {
    		
    		String valor = this.formatValor(cell.getFormattedValue()); 
    		
    		 out.append("<td class='cell'>").append(valor).append("</td>");
    		 out.append("<td class='cell'>").append(procentagemFormatada).append("</td>");
    		    		 
    	}       
    }
	
	
	private List<Double> calcularPorcentagens(List<Double> valores) {
		List<Double> porcentagens = new ArrayList<Double>();
		
		if(valores != null && valores.size() > 1) {
					
			for(int i = 0; i < this.getRows().size(); i++) {
				porcentagens.add(100.00);	
				
				Double valorReferencia = 0.0;
				if(i == 0) {
					valorReferencia = valores.get(i);
				}else {
					valorReferencia = valores.get((i) * this.getColumns().size());
				}
				
				for(int j = 1; j < this.getColumns().size(); j++) {
					
					double indiceCorrecao = 1;
					if(HAnalysis.indicesCorrecao!=null && HAnalysis.indicesCorrecao.length>=j)
						indiceCorrecao = HAnalysis.indicesCorrecao[j-1];
						
					double valorAtual = valores.get((i) * this.getColumns().size() + j)*indiceCorrecao;
					double porcentagem = 0.0;
					/*if(valorAtual < valorReferencia) {
						porcentagem = - ((100 * valorReferencia) / valorAtual); kiéisso???
					}else {
						porcentagem = (100 * valorAtual) / valorReferencia;
					}*/
					porcentagem = (100 * valorAtual) / valorReferencia;
					porcentagens.add(porcentagem);
				}				
			}						
		}
		
		return porcentagens;
	}



}
